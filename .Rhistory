#bray_log.nmds = metaMDS(bray_log.dist, previous.best = bray_log.nmds)
bray_log.nmds
##################################
#perform NMDS
bray_bin.nmds = metaMDS(bray_bin.dist, try = 20, trymax = 100, k = 3)
#bray_bin.nmds = metaMDS(bray_bin.dist, previous.best = bray_bin.nmds)
bray_bin.nmds
nmds.metadata = left_join(
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_bin.NMDS1 = scores(bray_bin.nmds)[,1],
bray_bin.NMDS2 = scores(bray_bin.nmds)[,2]
),
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_log.NMDS1 = scores(bray_log.nmds)[,1],
bray_log.NMDS2 = scores(bray_log.nmds)[,2]
),
by = "SequenceID"
) %>% left_join(
.,
metadata,
by = "SequenceID"
)
str(nmds.metadata)
nmds.metadata$Lure %>% unique
nmds.metadata$trapID %>% unique
nmds.metadata %>% filter(State == "NY") %>% pull(trapID) %>% unique
nmds.metadata$BaselineType %>% unique()
nmds.metadata$mdy = mdy(nmds.metadata$date)
#note if wish to set breaks manually can use date_breaks function
#e.g., scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks)
#see lib and vol_nmds.r script
#
date_breaks(as.integer(nmds.metadata %>% filter(!is.na(mdy)) %>% pull(mdy)))
five_cols_gradient_palette = c('#ca0020','#f4a582','#f7f7f7','#92c5de','#0571b0')
five_cols_gradient_palette = c('#ca0020','#ef8a62','#f7f7f7','#67a9cf','#2166ac')
five_cols_gradient_palette = c('#b2182b','#d6604d','#f4a582','white','#2166ac')
nmds.metadata$state.type = paste(nmds.metadata$State, nmds.metadata$BaselineType, sep = " ")
nmds.metadata[nmds.metadata$BaselineType == "BLO", "mdy"] = NA
#fill by date
p1 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS1, y = bray_bin.NMDS2, shape = state.type, fill = as.integer(mdy))
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,24,23,22)) +
scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks, na.value = "#525252") +
guides(shape = guide_legend(order = 1)) +
labs(x="NMDS1", y = "NMDS2") +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.78)
)
p1
#baseline v samples
p2 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS1, y = bray_bin.NMDS2, fill = state.type, shape = BaselineType)
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,21)) +
scale_fill_brewer(palette = "Paired") +
labs(x="NMDS1", y = "NMDS2") +
#ylim(-0.4, NA) +
annotate(geom = "text", label = "stress = 0.217", x = min(nmds.metadata$bray_bin.NMDS1), y = -0.4, hjust = 0, size = 5.5) +
guides(shape = "none", fill = guide_legend(override.aes = list(shape = c(25,21,25,21)))) +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.9)
)
p2
nmds.metadata = left_join(
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_bin.NMDS1 = scores(bray_bin.nmds)[,1],
bray_bin.NMDS2 = scores(bray_bin.nmds)[,2],
bray_bin.NMDS2 = scores(bray_bin.nmds)[,3]
),
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_log.NMDS1 = scores(bray_log.nmds)[,1],
bray_log.NMDS2 = scores(bray_log.nmds)[,2]
),
by = "SequenceID"
) %>% left_join(
.,
metadata,
by = "SequenceID"
)
str(nmds.metadata)
nmds.metadata$Lure %>% unique
nmds.metadata$trapID %>% unique
nmds.metadata %>% filter(State == "NY") %>% pull(trapID) %>% unique
nmds.metadata$BaselineType %>% unique()
nmds.metadata$mdy = mdy(nmds.metadata$date)
#note if wish to set breaks manually can use date_breaks function
#e.g., scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks)
#see lib and vol_nmds.r script
#
date_breaks(as.integer(nmds.metadata %>% filter(!is.na(mdy)) %>% pull(mdy)))
five_cols_gradient_palette = c('#ca0020','#f4a582','#f7f7f7','#92c5de','#0571b0')
five_cols_gradient_palette = c('#ca0020','#ef8a62','#f7f7f7','#67a9cf','#2166ac')
five_cols_gradient_palette = c('#b2182b','#d6604d','#f4a582','white','#2166ac')
nmds.metadata$state.type = paste(nmds.metadata$State, nmds.metadata$BaselineType, sep = " ")
nmds.metadata[nmds.metadata$BaselineType == "BLO", "mdy"] = NA
#fill by date
p1 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS1, y = bray_bin.NMDS2, shape = state.type, fill = as.integer(mdy))
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,24,23,22)) +
scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks, na.value = "#525252") +
guides(shape = guide_legend(order = 1)) +
labs(x="NMDS1", y = "NMDS2") +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.78)
)
p1
#fill by date
p1 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS1, y = bray_bin.NMDS3, shape = state.type, fill = as.integer(mdy))
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,24,23,22)) +
scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks, na.value = "#525252") +
guides(shape = guide_legend(order = 1)) +
labs(x="NMDS1", y = "NMDS2") +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.78)
)
p1
nmds.metadata
nmds.metadata = left_join(
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_bin.NMDS1 = scores(bray_bin.nmds)[,1],
bray_bin.NMDS2 = scores(bray_bin.nmds)[,2],
bray_bin.NMDS3 = scores(bray_bin.nmds)[,3]
),
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_log.NMDS1 = scores(bray_log.nmds)[,1],
bray_log.NMDS2 = scores(bray_log.nmds)[,2]
),
by = "SequenceID"
) %>% left_join(
.,
metadata,
by = "SequenceID"
)
str(nmds.metadata)
nmds.metadata$Lure %>% unique
nmds.metadata$trapID %>% unique
nmds.metadata %>% filter(State == "NY") %>% pull(trapID) %>% unique
nmds.metadata$BaselineType %>% unique()
nmds.metadata$mdy = mdy(nmds.metadata$date)
#note if wish to set breaks manually can use date_breaks function
#e.g., scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks)
#see lib and vol_nmds.r script
#
date_breaks(as.integer(nmds.metadata %>% filter(!is.na(mdy)) %>% pull(mdy)))
five_cols_gradient_palette = c('#ca0020','#f4a582','#f7f7f7','#92c5de','#0571b0')
five_cols_gradient_palette = c('#ca0020','#ef8a62','#f7f7f7','#67a9cf','#2166ac')
five_cols_gradient_palette = c('#b2182b','#d6604d','#f4a582','white','#2166ac')
nmds.metadata$state.type = paste(nmds.metadata$State, nmds.metadata$BaselineType, sep = " ")
nmds.metadata[nmds.metadata$BaselineType == "BLO", "mdy"] = NA
#fill by date
p1 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS1, y = bray_bin.NMDS3, shape = state.type, fill = as.integer(mdy))
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,24,23,22)) +
scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks, na.value = "#525252") +
guides(shape = guide_legend(order = 1)) +
labs(x="NMDS1", y = "NMDS2") +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.78)
)
p1
#fill by date
p1 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS2, y = bray_bin.NMDS3, shape = state.type, fill = as.integer(mdy))
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,24,23,22)) +
scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks, na.value = "#525252") +
guides(shape = guide_legend(order = 1)) +
labs(x="NMDS1", y = "NMDS2") +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.78)
)
p1
##################################
#perform NMDS
bray_bin.nmds = metaMDS(bray_bin.dist, try = 20, trymax = 100, k = 2, weakties = F)
#bray_bin.nmds = metaMDS(bray_bin.dist, previous.best = bray_bin.nmds)
bray_bin.nmds
nmds.metadata = left_join(
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_bin.NMDS1 = scores(bray_bin.nmds)[,1],
bray_bin.NMDS2 = scores(bray_bin.nmds)[,2]#,
#        bray_bin.NMDS3 = scores(bray_bin.nmds)[,3]
),
data.frame(
SequenceID = rownames(scores(bray_bin.nmds)),
bray_log.NMDS1 = scores(bray_log.nmds)[,1],
bray_log.NMDS2 = scores(bray_log.nmds)[,2]
),
by = "SequenceID"
) %>% left_join(
.,
metadata,
by = "SequenceID"
)
str(nmds.metadata)
nmds.metadata$Lure %>% unique
nmds.metadata$trapID %>% unique
nmds.metadata %>% filter(State == "NY") %>% pull(trapID) %>% unique
nmds.metadata$BaselineType %>% unique()
nmds.metadata$mdy = mdy(nmds.metadata$date)
#note if wish to set breaks manually can use date_breaks function
#e.g., scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks)
#see lib and vol_nmds.r script
#
date_breaks(as.integer(nmds.metadata %>% filter(!is.na(mdy)) %>% pull(mdy)))
five_cols_gradient_palette = c('#ca0020','#f4a582','#f7f7f7','#92c5de','#0571b0')
five_cols_gradient_palette = c('#ca0020','#ef8a62','#f7f7f7','#67a9cf','#2166ac')
five_cols_gradient_palette = c('#b2182b','#d6604d','#f4a582','white','#2166ac')
nmds.metadata$state.type = paste(nmds.metadata$State, nmds.metadata$BaselineType, sep = " ")
nmds.metadata[nmds.metadata$BaselineType == "BLO", "mdy"] = NA
#fill by date
p1 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS2, y = bray_bin.NMDS3, shape = state.type, fill = as.integer(mdy))
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,24,23,22)) +
scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks, na.value = "#525252") +
guides(shape = guide_legend(order = 1)) +
labs(x="NMDS1", y = "NMDS2") +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.78)
)
p1
#fill by date
p1 = ggplot(nmds.metadata %>% filter(BaselineType != "PCRnegative"),
aes(x = bray_bin.NMDS1, y = bray_bin.NMDS2, shape = state.type, fill = as.integer(mdy))
) +
geom_point(size = 3) +
scale_shape_manual(values = c(25,24,23,22)) +
scale_fill_gradientn(colours = rev(five_cols_gradient_palette), breaks = date_breaks, na.value = "#525252") +
guides(shape = guide_legend(order = 1)) +
labs(x="NMDS1", y = "NMDS2") +
my_gg_theme +
theme(
legend.position = "inside",
legend.position.inside = c(0.125,0.78)
)
p1
q(save="no")
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
source("library/library.R")
asv_tab.bl = read.csv("data/FEDRR_11062024/processed_tables/asv_tab.baseline.csv", row.names = 1)
#asv_tab.bl$SequenceID = rownames(asv_tab.bl)
asv_tab.samps = read.csv("data/FEDRR_11062024/processed_tables/asv_tab.samps.csv", row.names = 1)
#asv_tab.samps$SequenceID = rownames(asv_tab.samps)
asvs_tax = read.table("data/FEDRR_11062024/ASVs_taxonomy.tsv", header = T)
tax_bs = read.table("data/FEDRR_11062024/ASVs_taxonomy_bootstrapVals.tsv", header = T)
head(tax_bs < 90)
asvs_tax[tax_bs < 80] = NA
asv_tab.samps = t(asv_tab.samps) %>% data.frame
asv_tab.samps$ASV = rownames(asv_tab.samps)
asv_tab.bl = t(asv_tab.bl) %>% data.frame
asv_tab.bl$ASV = rownames(asv_tab.bl)
asv_tab.samps_bl = full_join(asv_tab.samps, asv_tab.bl, by = "ASV") %>% mutate(across(everything(), ~replace_na(., 0))) %>% data.frame
metadata = read.csv("data/2024_metadata/collated/collated_metadata_NY-OH_11062024.csv")
sp_search_terms = read.table("data/2024_metadata/NY_spp_concern_search_terms.txt", header = F)
asvs_gen_sp_search = data.frame(
ASV = rownames(asvs_tax),
Genus = sub("g__", "", asvs_tax$Genus),
Species = sub("s__", "", asvs_tax$Species),
stringsAsFactors = F
)
test_split = function(x){
if(grepl("_", x)){
return( str_split_i(x, "_", 1) )
} else {
return(x)
}
}
ny_gen_search = sapply(sp_search_terms$V1, test_split) %>% unname
ny_sp_search = mapply(\(x, y) sub(x, "", y), ny_gen_search, sp_search_terms$V1) %>% sub("^_", "", .) %>% unname
ny_sp_search[ny_sp_search == ""] = NA
ny_search_terms = data.frame(
Genus = ny_gen_search,
Species = ny_sp_search,
stringsAsFactors = F
)
asv_tab.samps.tax = left_join(asv_tab.samps_bl, asvs_gen_sp_search, by = "ASV")
head(asv_tab.samps.tax)
asv_tab.samps.gen = asv_tab.samps.tax %>%
filter(Genus %in% ny_search_terms$Genus) %>%
group_by(Genus) %>%
summarize(across(where(is.numeric), sum) )
asv_tab.samps.spp = asv_tab.samps.tax %>%
filter(Genus %in% ny_search_terms$Genus & Species %in% ny_search_terms$Species & !is.na(Species)) %>%
group_by(Genus, Species) %>%
summarize(across(where(is.numeric), sum) )
asv_tab.samps.gen.char = asv_tab.samps.gen %>%
mutate(across(where(is.numeric), .fns = ~ifelse(. > 0, "genus", "absent"))) %>%
data.frame()
asv_tab.samps.spp.char = asv_tab.samps.spp %>%
mutate(across(where(is.numeric), .fns = ~ifelse(. > 0, "species", "absent"))) %>%
data.frame()
#join with the genus character indicators first
ny_search_terms.samps = left_join(
ny_search_terms,
asv_tab.samps.gen.char,
by = "Genus"
) %>% data.frame
#then test for where we found a species and change the value where applicable
for(i in 1:nrow(asv_tab.samps.spp.char) ){
for(j in 3:ncol(asv_tab.samps.spp.char) ){
if(asv_tab.samps.spp.char[i,j] == "species"){
ny_search_terms.samps[ny_search_terms.samps$Genus == asv_tab.samps.spp.char[i,1] & ny_search_terms.samps$Species == asv_tab.samps.spp.char[i,2], j] = "species"
}
}
}
sum(ny_search_terms.samps == "species", na.rm = T)
sum(ny_search_terms.samps == "genus", na.rm = T)
#replace NAs with absent
ny_search_terms.samps.rp_na = ny_search_terms.samps %>%
mutate(across(c(3:ncol(ny_search_terms.samps)), ~replace_na(., "absent")) ) %>%
data.frame()
sum(ny_search_terms.samps.rp_na == "species", na.rm = T)
sum(ny_search_terms.samps.rp_na == "genus", na.rm = T)
ny_search_terms.long = left_join(
ny_search_terms.samps.rp_na %>%
pivot_longer(cols = c(-Genus, - Species), names_to = "SequenceID", values_to = "gen_sp"),
metadata %>%
select(SequenceID, State, Site, Risk, date, Lure, BaselineType),
by = "SequenceID"
)
ny_search_terms.long$spec_name = paste(ny_search_terms.long$Genus, ny_search_terms.long$Species)
ny_search_terms.long$spec_name = sub(" NA", "", ny_search_terms.long$spec_name)
ny_search_terms.long$spec_name = sub("_", " ", ny_search_terms.long$spec_name)
ny_search_terms.long$spec_name = sub("-occidentalis", "", ny_search_terms.long$spec_name)
ny_search_terms.long[ny_search_terms.long$BaselineType == 'BLO', "date"] = "BL"
uniq_dates = ny_search_terms.long$date %>% unique() %>% str_sort(., numeric = T)
p1 = ggplot(ny_search_terms.long %>% filter(State == "NY" & spec_name != "Ophiostoma"),
aes(x = factor(date, levels = c(uniq_dates[c(20,1:19)])), y = Lure, fill = factor(gen_sp, levels = c("species", "genus", "absent")) )
) +
geom_tile() +
scale_fill_manual(
values = c("red", "yellow", "grey"),
labels = c("species present", "genus present", "not detected")
) +
labs(fill = "Presence/absence:", x = "Sample date/type") +
facet_grid(Site~spec_name, scales = "free_x", labeller = label_wrap_gen(12) ) +
my_gg_theme +
theme(
axis.text.x = element_text(angle = 55, hjust = 1),
axis.title.y = element_blank(),
legend.title = element_text(size = 15),
legend.position= "bottom"
)
p1
pdf("figures/FEDRR_11062024/NY_spp_concern.pdf", width = 34, height = 11)
p1
dev.off()
ny_search_terms.long$spec_name
sub("Ceratocystis", "Breziella", ny_search_terms.long$spec_name)
ny_search_terms.samps
head(asv_tab.samps.tax)
ny_search_terms
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
source("library/library.R")
asv_tab.bl = read.csv("data/FEDRR_11062024/processed_tables/asv_tab.baseline.csv", row.names = 1)
#asv_tab.bl$SequenceID = rownames(asv_tab.bl)
asv_tab.samps = read.csv("data/FEDRR_11062024/processed_tables/asv_tab.samps.csv", row.names = 1)
#asv_tab.samps$SequenceID = rownames(asv_tab.samps)
asvs_tax = read.table("data/FEDRR_11062024/ASVs_taxonomy.tsv", header = T)
tax_bs = read.table("data/FEDRR_11062024/ASVs_taxonomy_bootstrapVals.tsv", header = T)
head(tax_bs < 90)
asvs_tax[tax_bs < 80] = NA
asv_tab.samps = t(asv_tab.samps) %>% data.frame
asv_tab.samps$ASV = rownames(asv_tab.samps)
asv_tab.bl = t(asv_tab.bl) %>% data.frame
asv_tab.bl$ASV = rownames(asv_tab.bl)
asv_tab.samps_bl = full_join(asv_tab.samps, asv_tab.bl, by = "ASV") %>% mutate(across(everything(), ~replace_na(., 0))) %>% data.frame
metadata = read.csv("data/2024_metadata/collated/collated_metadata_NY-OH_11062024.csv")
sp_search_terms = read.table("data/2024_metadata/NY_spp_concern_search_terms.txt", header = F)
asvs_gen_sp_search = data.frame(
ASV = rownames(asvs_tax),
Genus = sub("g__", "", asvs_tax$Genus),
Species = sub("s__", "", asvs_tax$Species),
stringsAsFactors = F
)
# formatting up search terms
test_split = function(x){
if(grepl("_", x)){
return( str_split_i(x, "_", 1) )
} else {
return(x)
}
}
ny_gen_search = sapply(sp_search_terms$V1, test_split) %>% unname
ny_sp_search = mapply(\(x, y) sub(x, "", y), ny_gen_search, sp_search_terms$V1) %>% sub("^_", "", .) %>% unname
ny_sp_search[ny_sp_search == ""] = NA
ny_search_terms = data.frame(
Genus = ny_gen_search,
Species = ny_sp_search,
stringsAsFactors = F
)
#
#
#########################
# setting up search tables
# wel will have one for genus
# and one for species
# and mark >0 samples as yes
#
asv_tab.samps.tax = left_join(asv_tab.samps_bl, asvs_gen_sp_search, by = "ASV")
head(asv_tab.samps.tax)
asv_tab.samps.gen = asv_tab.samps.tax %>%
filter(Genus %in% ny_search_terms$Genus) %>%
group_by(Genus) %>%
summarize(across(where(is.numeric), sum) )
asv_tab.samps.spp = asv_tab.samps.tax %>%
filter(Genus %in% ny_search_terms$Genus & Species %in% ny_search_terms$Species & !is.na(Species)) %>%
group_by(Genus, Species) %>%
summarize(across(where(is.numeric), sum) )
asv_tab.samps.gen.char = asv_tab.samps.gen %>%
mutate(across(where(is.numeric), .fns = ~ifelse(. > 0, "genus", "absent"))) %>%
data.frame()
asv_tab.samps.spp.char = asv_tab.samps.spp %>%
mutate(across(where(is.numeric), .fns = ~ifelse(. > 0, "species", "absent"))) %>%
data.frame()
#join with the genus character indicators first
ny_search_terms.samps = left_join(
ny_search_terms,
asv_tab.samps.gen.char,
by = "Genus"
) %>% data.frame
#then test for where we found a species and change the value where applicable
for(i in 1:nrow(asv_tab.samps.spp.char) ){
for(j in 3:ncol(asv_tab.samps.spp.char) ){
if(asv_tab.samps.spp.char[i,j] == "species"){
ny_search_terms.samps[ny_search_terms.samps$Genus == asv_tab.samps.spp.char[i,1] & ny_search_terms.samps$Species == asv_tab.samps.spp.char[i,2], j] = "species"
}
}
}
sum(ny_search_terms.samps == "species", na.rm = T)
sum(ny_search_terms.samps == "genus", na.rm = T)
#replace NAs with absent
ny_search_terms.samps.rp_na = ny_search_terms.samps %>%
mutate(across(c(3:ncol(ny_search_terms.samps)), ~replace_na(., "absent")) ) %>%
data.frame()
sum(ny_search_terms.samps.rp_na == "species", na.rm = T)
sum(ny_search_terms.samps.rp_na == "genus", na.rm = T)
ny_search_terms.long = left_join(
ny_search_terms.samps.rp_na %>%
pivot_longer(cols = c(-Genus, - Species), names_to = "SequenceID", values_to = "gen_sp"),
metadata %>%
select(SequenceID, State, Site, Risk, date, Lure, BaselineType),
by = "SequenceID"
)
ny_search_terms.long$spec_name = paste(ny_search_terms.long$Genus, ny_search_terms.long$Species)
ny_search_terms.long$spec_name = sub(" NA", "", ny_search_terms.long$spec_name)
ny_search_terms.long$spec_name = sub("_", " ", ny_search_terms.long$spec_name)
ny_search_terms.long$spec_name = sub("-occidentalis", "", ny_search_terms.long$spec_name)
ny_search_terms.long$spec_name = sub("Ceratocystis", "Breziella", ny_search_terms.long$spec_name)
ny_search_terms.long[ny_search_terms.long$BaselineType == 'BLO', "date"] = "BL"
uniq_dates = ny_search_terms.long$date %>% unique() %>% str_sort(., numeric = T)
p1 = ggplot(ny_search_terms.long %>% filter(State == "NY" & spec_name != "Ophiostoma"),
aes(x = factor(date, levels = c(uniq_dates[c(20,1:19)])), y = Lure, fill = factor(gen_sp, levels = c("species", "genus", "absent")) )
) +
geom_tile() +
scale_fill_manual(
values = c("red", "yellow", "grey"),
labels = c("species present", "genus present", "not detected")
) +
labs(fill = "Presence/absence:", x = "Sample date/type") +
facet_grid(Site~spec_name, scales = "free_x", labeller = label_wrap_gen(12) ) +
my_gg_theme +
theme(
axis.text.x = element_text(angle = 55, hjust = 1),
axis.title.y = element_blank(),
legend.title = element_text(size = 15),
legend.position= "bottom"
)
p1
pdf("figures/FEDRR_11062024/NY_spp_concern.pdf", width = 34, height = 11)
p1
dev.off()
